#!/bin/bash

# Piper TTS Web Server Setup Script
# R√Ωchle nastavenie Piper TTS servera pre webov√© rozhranie

set -euo pipefail

# Konfigur√°cia
TTS_VOICE="${TTS_VOICE:-sk_SK-lili-medium}"
PIPER_TTS_PORT="${PIPER_TTS_PORT:-5000}"
PIPER_VOICES_URL="${PIPER_VOICES_URL:-https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/sk/sk_SK/lili/medium/sk_SK-lili-medium.onnx}"
PIPER_VOICES_JSON_URL="${PIPER_VOICES_JSON_URL:-https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/sk/sk_SK/lili/medium/sk_SK-lili-medium.onnx.json}"

# Farby pre v√Ωstup
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Utility funkcie
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

step() {
    echo -e "${PURPLE}üîÑ $1${NC}"
}

# Kontrola Docker in≈°tal√°cie
check_docker() {
    step "Kontrolujem Docker in≈°tal√°ciu..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker nie je nain≈°talovan√Ω!"
        info "In≈°tal√°cia Docker:"
        info "Ubuntu/Debian: sudo apt-get update && sudo apt-get install docker.io"
        info "macOS: brew install docker"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        error "Docker daemon nie je spusten√Ω!"
        info "Spustenie Docker: sudo systemctl start docker"
        exit 1
    fi
    
    success "Docker je dostupn√Ω"
}

# Vytvorenie adres√°ra pre hlasov√© modely
setup_voices_directory() {
    step "Nastavujem adres√°r pre hlasov√© modely..."
    
    VOICES_DIR="./piper-data"
    
    if [[ ! -d "$VOICES_DIR" ]]; then
        mkdir -p "$VOICES_DIR"
        success "Vytvoren√Ω adres√°r: $VOICES_DIR"
    else
        info "Adres√°r u≈æ existuje: $VOICES_DIR"
    fi
    
    # Kontrola slovensk√©ho hlasu
    SLOVAK_VOICE="$VOICES_DIR/$TTS_VOICE.onnx"
    SLOVAK_CONFIG="$VOICES_DIR/$TTS_VOICE.onnx.json"
    
    if [[ ! -f "$SLOVAK_VOICE" ]] || [[ ! -f "$SLOVAK_CONFIG" ]]; then
        warning "Slovensk√Ω hlas nie je n√°jden√Ω"
        info "S≈•ahujem slovensk√Ω hlas $TTS_VOICE..."
        
        # Stiahnutie hlasov√©ho modelu
        curl -L -o "$SLOVAK_VOICE" "$PIPER_VOICES_URL"
        curl -L -o "$SLOVAK_CONFIG" "$PIPER_VOICES_JSON_URL"
        
        if [[ -f "$SLOVAK_VOICE" ]] && [[ -f "$SLOVAK_CONFIG" ]]; then
            success "Slovensk√Ω hlas √∫spe≈°ne stiahnut√Ω"
        else
            error "Nepodarilo sa stiahnu≈• slovensk√Ω hlas"
            info "Manu√°lne stiahnutie z: https://huggingface.co/rhasspy/piper-voices/tree/main/sk/sk_SK/lili/medium"
            exit 1
        fi
    else
        success "Slovensk√Ω hlas je dostupn√Ω"
    fi
}

# Vytvorenie Docker Compose s√∫boru
create_docker_compose() {
    step "Vytv√°ram Docker Compose s√∫bor..."
    
    cat > docker-compose.piper-tts.yml << EOF
version: '3.8'

services:
  # Ofici√°lny Wyoming Piper TTS server
  piper-tts-server:
    image: rhasspy/wyoming-piper:latest
    container_name: piper-tts-server
    ports:
      - "$PIPER_TTS_PORT:5000"    # HTTP API
      - "10200:10200"             # Wyoming protokol
    volumes:
      - ./piper-data:/data
    command: >
      --voice $TTS_VOICE
      --http-port 5000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voice-chat-network

networks:
  voice-chat-network:
    name: voice-chat-network
EOF
    
    success "Docker Compose s√∫bor vytvoren√Ω: docker-compose.piper-tts.yml"
}

# Vytvorenie Docker network
create_docker_network() {
    step "Vytv√°ram Docker network..."
    
    if ! docker network ls | grep -q "voice-chat-network"; then
        docker network create voice-chat-network
        success "Docker network vytvoren√°: voice-chat-network"
    else
        info "Docker network u≈æ existuje: voice-chat-network"
    fi
}

# Spustenie Piper TTS servera
start_piper_tts_server() {
    step "Sp√∫≈°≈•am Piper TTS server..."
    
    # Zastavenie existuj√∫ceho kontajnera
    if docker ps -a | grep -q "piper-tts-server"; then
        info "Zastavujem existuj√∫ci kontajner..."
        docker stop piper-tts-server 2>/dev/null || true
        docker rm piper-tts-server 2>/dev/null || true
    fi
    
    # Spustenie nov√©ho kontajnera
    docker-compose -f docker-compose.piper-tts.yml up -d
    
    if [[ $? -eq 0 ]]; then
        success "Piper TTS server spusten√Ω"
    else
        error "Nepodarilo sa spusti≈• Piper TTS server"
        exit 1
    fi
}

# Aktualiz√°cia .env s√∫boru
update_env_file() {
    step "Aktualizujem .env s√∫bor..."
    
    if [[ -f ".env" ]]; then
        # Z√°loha p√¥vodn√©ho .env s√∫boru
        cp .env .env.backup
        info "Vytvoren√° z√°loha p√¥vodn√©ho .env s√∫boru: .env.backup"
        
        # Odstr√°nenie existuj√∫cich TTS nastaven√≠
        sed -i.bak '/^PIPER_TTS_URL=/d' .env
        sed -i.bak '/^# PIPER_TTS_URL=/d' .env
        sed -i.bak '/^PIPER_PATH=/d' .env
        sed -i.bak '/^PIPER_VOICES_PATH=/d' .env
        
        # Pridanie nov√Ωch TTS nastaven√≠
        echo "" >> .env
        echo "# TTS Configuration - Remote Piper TTS Server" >> .env
        echo "PIPER_TTS_URL=http://piper-tts-server:5000" >> .env
        echo "TTS_VOICE=$TTS_VOICE" >> .env
        echo "TTS_CACHE_ENABLED=true" >> .env
        echo "# Fallback local Piper (disabled)" >> .env
        echo "# PIPER_PATH=/usr/local/bin/piper" >> .env
        echo "# PIPER_VOICES_PATH=/app/voices" >> .env
        
        success "Aktualizovan√Ω .env s√∫bor s PIPER_TTS_URL=http://piper-tts-server:5000"
    else
        warning ".env s√∫bor neexistuje"
        info "Vytv√°ram nov√Ω .env s√∫bor..."
        
        cat > .env << EOF
# Oracle Voice Chat Backend - Environment
NODE_ENV=development
PORT=3000
HOST=0.0.0.0
TZ=Europe/Bratislava

# TTS Configuration - Remote Piper TTS Server
PIPER_TTS_URL=http://piper-tts-server:5000
TTS_VOICE=$TTS_VOICE
TTS_CACHE_ENABLED=true
# Fallback local Piper (disabled)
# PIPER_PATH=/usr/local/bin/piper
# PIPER_VOICES_PATH=/app/voices
EOF
        
        success "Vytvoren√Ω nov√Ω .env s√∫bor"
    fi
}

# Test Piper TTS servera
test_piper_tts_server() {
    step "Testujem Piper TTS server..."
    
    # ƒåakanie na spustenie servera
    info "ƒåak√°m na spustenie servera..."
    sleep 10
    
    # Test HTTP API
    info "Testujem HTTP API..."
    if curl -s -f "http://localhost:$PIPER_TTS_PORT" > /dev/null; then
        success "HTTP API je dostupn√©"
    else
        warning "HTTP API nie je dostupn√©, ƒçak√°m ƒèal≈°√≠ch 20 sek√∫nd..."
        sleep 20
        if curl -s -f "http://localhost:$PIPER_TTS_PORT" > /dev/null; then
            success "HTTP API je dostupn√© po dodatoƒçnom ƒçakan√≠"
        else
            error "HTTP API nie je dostupn√©"
            info "Skontroluj logy: docker logs piper-tts-server"
            exit 1
        fi
    fi
    
    # Test generovania reƒçi
    info "Testujem generovanie reƒçi..."
    if curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "{\"text\":\"Test Piper TTS servera\", \"voice\":\"$TTS_VOICE\"}" \
        "http://localhost:$PIPER_TTS_PORT/api/tts" \
        --output /tmp/test.wav && [[ -f "/tmp/test.wav" ]]; then
        
        success "Generovanie reƒçi funguje"
        rm -f /tmp/test.wav
    else
        error "Generovanie reƒçi nefunguje"
        info "Skontroluj logy: docker logs piper-tts-server"
        exit 1
    fi
}

# Re≈°tart aplik√°cie
restart_application() {
    step "Re≈°tartujem aplik√°ciu..."
    
    if command -v pm2 &> /dev/null && pm2 list | grep -q "voice-chat"; then
        info "Re≈°tartujem PM2 slu≈æbu..."
        pm2 restart voice-chat
        success "Aplik√°cia re≈°tartovan√°"
    elif [[ -f "docker-compose.yml" ]]; then
        info "Re≈°tartujem Docker kontajnery..."
        docker-compose restart
        success "Docker kontajnery re≈°tartovan√©"
    else
        warning "Nem√¥≈æem automaticky re≈°tartova≈• aplik√°ciu"
        info "Re≈°tartuj aplik√°ciu manu√°lne"
    fi
}

# Zobrazenie in≈°trukci√≠
show_instructions() {
    echo ""
    echo -e "${GREEN}üéâ PIPER TTS SERVER √öSPE≈†NE NASTAVEN√ù!${NC}"
    echo "=============================================="
    echo ""
    echo -e "${CYAN}üåê Piper TTS Server je dostupn√Ω na:${NC}"
    echo "   HTTP API:    http://localhost:$PIPER_TTS_PORT"
    echo "   Wyoming:     localhost:10200"
    echo ""
    echo -e "${CYAN}üîß Spr√°va servera:${NC}"
    echo "   docker-compose -f docker-compose.piper-tts.yml ps"
    echo "   docker-compose -f docker-compose.piper-tts.yml logs -f"
    echo "   docker-compose -f docker-compose.piper-tts.yml restart"
    echo "   docker-compose -f docker-compose.piper-tts.yml down"
    echo ""
    echo -e "${CYAN}üß™ Testovanie:${NC}"
    echo "   curl -X POST -H \"Content-Type: application/json\" \\"
    echo "        -d '{\"text\":\"Test Piper TTS servera\", \"voice\":\"$TTS_VOICE\"}' \\"
    echo "        http://localhost:$PIPER_TTS_PORT/api/tts --output test.wav"
    echo ""
    echo -e "${YELLOW}üìã ƒéal≈°ie kroky:${NC}"
    echo "   1. Re≈°tartuj aplik√°ciu ak e≈°te nebola re≈°tartovan√°"
    echo "   2. Otestuj TTS endpoint: curl -X POST -H 'Content-Type: application/json' -d '{\"text\":\"test\"}' http://localhost:3000/api/tts/synthesize"
    echo "   3. Skontroluj status: curl http://localhost:3000/api/tts/status"
    echo ""
}

# Hlavn√° funkcia
main() {
    echo -e "${GREEN}üöÄ PIPER TTS WEB SERVER SETUP${NC}"
    echo "============================="
    echo ""
    
    check_docker
    setup_voices_directory
    create_docker_compose
    create_docker_network
    start_piper_tts_server
    update_env_file
    test_piper_tts_server
    restart_application
    show_instructions
    
    success "Setup dokonƒçen√Ω!"
}

# Spustenie scriptu
main "$@"
