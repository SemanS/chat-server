#!/bin/bash

# Universal Oracle Voice Chat Backend Deployment Script
# Univerz√°lny deployment script pre Oracle Voice Chat Backend
set -euo pipefail

# ============================================================================
# KONFIGUR√ÅCIA - UPRAVTE PODƒΩA POTREBY
# ============================================================================

# Server konfigur√°cia
SERVER_IP="${SERVER_IP:-129.159.9.170}"
SSH_KEY="${SSH_KEY:-/Users/hotovo/Documents/augment-projects/chat/ssh-key-2025-07-16 (3).key}"
SSH_USER="${SSH_USER:-ubuntu}"
REMOTE_DIR="${REMOTE_DIR:-/home/ubuntu/chat-server}"

# API kƒæ√∫ƒçe (m√¥≈æu by≈• nastaven√© ako environment variables)
DEEPGRAM_API_KEY="${DEEPGRAM_API_KEY:-}"
OPENAI_API_KEY="${OPENAI_API_KEY:-}"

# TTS konfigur√°cia
TTS_VOICE="${TTS_VOICE:-sk_SK-lili-medium}"
PIPER_VOICES_URL="${PIPER_VOICES_URL:-https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/sk/sk_SK/lili/medium/sk_SK-lili-medium.onnx}"
PIPER_VOICES_JSON_URL="${PIPER_VOICES_JSON_URL:-https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/sk/sk_SK/lili/medium/sk_SK-lili-medium.onnx.json}"

# Farby pre v√Ωstup
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# ============================================================================
# UTILITY FUNKCIE
# ============================================================================

log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

step() {
    echo -e "${PURPLE}üîÑ $1${NC}"
}

# Kontrola prerekviz√≠t
check_prerequisites() {
    log "Kontrolujem prerekvizity..."
    
    # Kontrola SSH kƒæ√∫ƒça
    if [[ ! -f "$SSH_KEY" ]]; then
        error "SSH kƒæ√∫ƒç nen√°jden√Ω: $SSH_KEY"
        exit 1
    fi
    
    # Kontrola pr√≠stupu na server
    if ! ssh -i "$SSH_KEY" -o ConnectTimeout=10 -o BatchMode=yes "$SSH_USER@$SERVER_IP" exit 2>/dev/null; then
        error "Nem√¥≈æem sa pripoji≈• na server $SERVER_IP"
        exit 1
    fi
    
    success "Prerekvizity v poriadku"
}

# Zobrazenie konfigur√°cie
show_config() {
    echo ""
    echo -e "${PURPLE}üöÄ ORACLE VOICE CHAT BACKEND DEPLOYMENT${NC}"
    echo "=============================================="
    echo ""
    echo -e "${CYAN}üìã Konfigur√°cia:${NC}"
    echo "   Server IP:     $SERVER_IP"
    echo "   SSH User:      $SSH_USER"
    echo "   SSH Key:       $SSH_KEY"
    echo "   Remote Dir:    $REMOTE_DIR"
    echo "   TTS Voice:     $TTS_VOICE"
    echo ""
    echo -e "${CYAN}üîë API Keys:${NC}"
    echo "   Deepgram:      ${DEEPGRAM_API_KEY:+‚úÖ Nastaven√Ω}${DEEPGRAM_API_KEY:-‚ùå Nenastaven√Ω}"
    echo "   OpenAI:        ${OPENAI_API_KEY:+‚úÖ Nastaven√Ω}${OPENAI_API_KEY:-‚ùå Nenastaven√Ω}"
    echo ""
}

# Potvrdenie deployment
confirm_deployment() {
    echo -e "${YELLOW}‚ö†Ô∏è  Toto nasad√≠ nov√Ω backend na produkƒçn√Ω server!${NC}"
    echo ""
    read -p "Pokraƒçova≈• s deployment? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Deployment zru≈°en√Ω"
        exit 0
    fi
}

# ============================================================================
# DEPLOYMENT FUNKCIE
# ============================================================================

# Pr√≠prava lok√°lneho k√≥du
prepare_local_code() {
    step "Pripravujem lok√°lny k√≥d..."
    
    # Kontrola, ƒçi sme v spr√°vnom adres√°ri
    if [[ ! -f "package.json" ]] || [[ ! -f "server.js" ]]; then
        error "Nie ste v adres√°ri s backend k√≥dom!"
        exit 1
    fi
    
    # Vytvorenie doƒçasn√©ho tar s√∫boru
    log "Vytv√°ram arch√≠v k√≥du..."
    tar --exclude='node_modules' \
        --exclude='.git' \
        --exclude='logs' \
        --exclude='tmp' \
        --exclude='*.log' \
        --exclude='*.tar.gz' \
        -czf /tmp/backend-deploy.tar.gz .
    
    success "Lok√°lny k√≥d pripraven√Ω"
}

# Nasadenie k√≥du na server
deploy_code() {
    step "Nasadzujem k√≥d na server..."
    
    # Kop√≠rovanie arch√≠vu na server
    log "Kop√≠rujem k√≥d na server..."
    scp -i "$SSH_KEY" /tmp/backend-deploy.tar.gz "$SSH_USER@$SERVER_IP:/tmp/"
    
    # Nasadenie na serveri
    ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" << EOF
set -e

echo "üîÑ Nasadzujem Oracle Voice Chat Backend..."

# Zastavenie existuj√∫cich slu≈æieb
if [[ -d "$REMOTE_DIR" ]]; then
    echo "üõë Zastavujem existuj√∫ce slu≈æby..."
    cd "$REMOTE_DIR"
    docker-compose down || true
    cd /home/ubuntu
fi

# Backup existuj√∫cej in≈°tal√°cie
if [[ -d "$REMOTE_DIR" ]]; then
    echo "üíæ Vytv√°ram backup..."
    sudo mv "$REMOTE_DIR" "${REMOTE_DIR}-backup-\$(date +%Y%m%d_%H%M%S)"
fi

# Vytvorenie nov√©ho adres√°ra
echo "üìÅ Vytv√°ram nov√Ω adres√°r..."
mkdir -p "$REMOTE_DIR"
cd "$REMOTE_DIR"

# Rozbalenie k√≥du
echo "üì¶ Rozbaƒæujem k√≥d..."
tar -xzf /tmp/backend-deploy.tar.gz
rm /tmp/backend-deploy.tar.gz

# Vytvorenie potrebn√Ωch adres√°rov
echo "üìÅ Vytv√°ram potrebn√© adres√°re..."
mkdir -p logs tmp/tts_cache tmp/audio_uploads ssl nginx/conf.d piper-models

echo "‚úÖ K√≥d nasaden√Ω"
EOF
    
    success "K√≥d nasaden√Ω na server"
}

# In≈°tal√°cia syst√©mov√Ωch z√°vislost√≠
install_system_dependencies() {
    step "In≈°talujem syst√©mov√© z√°vislosti..."

    ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" << 'EOF'
set -e

echo "üì¶ Aktualizujem syst√©m..."
sudo apt-get update -qq

# In≈°tal√°cia z√°kladn√Ωch n√°strojov
echo "üîß In≈°talujem z√°kladn√© n√°stroje..."
sudo apt-get install -y curl wget git unzip build-essential

# In≈°tal√°cia Docker ak nie je nain≈°talovan√Ω
if ! command -v docker &> /dev/null; then
    echo "üê≥ In≈°talujem Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker ubuntu
    sudo systemctl enable docker
    sudo systemctl start docker
    rm get-docker.sh

    # Re≈°tart session pre Docker group
    echo "üîÑ Re≈°tartujem session pre Docker group..."
    newgrp docker
fi

# In≈°tal√°cia Docker Compose ak nie je nain≈°talovan√Ω
if ! command -v docker-compose &> /dev/null; then
    echo "üîß In≈°talujem Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
fi

echo "‚úÖ Syst√©mov√© z√°vislosti nain≈°talovan√©"
EOF

    success "Syst√©mov√© z√°vislosti nain≈°talovan√©"
}

# In≈°tal√°cia a konfigur√°cia Piper TTS
setup_piper_tts() {
    step "Nastavujem Piper TTS..."

    ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" << EOF
set -e

echo "üîä Nastavujem Piper TTS..."

# Stiahnutie Piper binary ak neexistuje
if [[ ! -f "/usr/local/bin/piper" ]]; then
    echo "üì• S≈•ahujem Piper TTS binary..."
    cd /tmp
    wget -q https://github.com/rhasspy/piper/releases/download/v1.2.0/piper_amd64.tar.gz
    tar -xzf piper_amd64.tar.gz

    # In≈°tal√°cia Piper
    sudo cp piper/piper /usr/local/bin/
    sudo chmod +x /usr/local/bin/piper

    # Cleanup
    rm -rf piper piper_amd64.tar.gz

    echo "‚úÖ Piper binary nain≈°talovan√Ω"
fi

# Stiahnutie slovensk√©ho voice modelu ak neexistuje
if [[ ! -f "$REMOTE_DIR/piper-models/$TTS_VOICE.onnx" ]]; then
    echo "üì• S≈•ahujem slovensk√Ω voice model..."
    cd "$REMOTE_DIR/piper-models"

    # Stiahnutie ONNX modelu
    wget -q -O "$TTS_VOICE.onnx" "$PIPER_VOICES_URL"

    # Stiahnutie JSON konfigur√°cie
    wget -q -O "$TTS_VOICE.onnx.json" "$PIPER_VOICES_JSON_URL"

    echo "‚úÖ Voice model $TTS_VOICE stiahnut√Ω"
fi

# Test Piper TTS
echo "üß™ Testujem Piper TTS..."
if echo "Test slovensk√©ho hlasu" | /usr/local/bin/piper --model "$REMOTE_DIR/piper-models/$TTS_VOICE.onnx" --output_file /tmp/test.wav; then
    echo "‚úÖ Piper TTS test √∫spe≈°n√Ω"
    rm -f /tmp/test.wav
else
    echo "‚ùå Piper TTS test zlyhal"
    exit 1
fi

echo "‚úÖ Piper TTS nakonfigurovan√Ω"
EOF

    success "Piper TTS nakonfigurovan√Ω"
}

# Konfigur√°cia environment variables
configure_environment() {
    step "Konfigururjem environment..."

    ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" << EOF
set -e

cd "$REMOTE_DIR"

echo "‚öôÔ∏è Vytv√°ram .env s√∫bor..."

# Vytvorenie .env s√∫boru
cat > .env << 'ENV_EOF'
# Oracle Voice Chat Backend - Production Environment
NODE_ENV=production
PORT=3000
HOST=0.0.0.0
TZ=Europe/Bratislava

# API Keys
DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY:-mock}
OPENAI_API_KEY=${OPENAI_API_KEY:-mock}

# OpenAI Configuration
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=500
OPENAI_TEMPERATURE=0.7
OPENAI_SYSTEM_PROMPT=Si u≈æitoƒçn√Ω AI asistent. Odpovedaj v slovenƒçine, buƒè struƒçn√Ω a priateƒæsk√Ω. Ak dostane≈° ot√°zku v inom jazyku, odpovedaj v tom istom jazyku.

# Redis Configuration
USE_REDIS=false
REDIS_URL=redis://redis:6379
REDIS_PASSWORD=oracleVoiceChat2024

# CORS Configuration
ALLOWED_ORIGINS=*

# SSL/TLS Configuration
SSL_CERT_PATH=/etc/ssl/cloudflare/origin.crt
SSL_KEY_PATH=/etc/ssl/cloudflare/origin.key

# TTS Configuration
TTS_VOICE=$TTS_VOICE
TTS_CACHE_ENABLED=true
PIPER_PATH=/usr/local/bin/piper
PIPER_VOICES_PATH=/app/voices

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Monitoring
ENABLE_METRICS=true
LOG_LEVEL=info

# Session Configuration
SESSION_SECRET=\$(openssl rand -base64 32)
SESSION_MAX_AGE=86400000

# Development flags
MOCK_SERVICES=false
DEBUG=voice-chat:*
ENV_EOF

echo "‚úÖ Environment nakonfigurovan√Ω"
EOF

    success "Environment nakonfigurovan√Ω"
}

# Konfigur√°cia Docker Compose
configure_docker_compose() {
    step "Konfigururjem Docker Compose..."

    ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" << EOF
set -e

cd "$REMOTE_DIR"

echo "üê≥ Aktualizujem docker-compose.yml..."

# Pridanie volume pre Piper voices ak neexistuje
if ! grep -q "piper-models:/app/voices" docker-compose.yml; then
    # Pridanie volume mount pre voices
    sed -i '/- \.\/tmp:\/app\/tmp/a\      - \.\/piper-models:\/app\/voices:ro' docker-compose.yml
fi

# Pridanie environment variables pre TTS
if ! grep -q "TTS_VOICE=" docker-compose.yml; then
    sed -i '/- USE_REDIS=\${USE_REDIS:-false}/a\      - TTS_VOICE=$TTS_VOICE\n      - PIPER_PATH=/usr/local/bin/piper\n      - PIPER_VOICES_PATH=/app/voices' docker-compose.yml
fi

# Pridanie volume mount pre Piper binary ak neexistuje
if ! grep -q "/usr/local/bin/piper" docker-compose.yml; then
    sed -i '/- \.\/piper-models:\/app\/voices:ro/a\      - \/usr\/local\/bin\/piper:\/usr\/local\/bin\/piper:ro' docker-compose.yml
fi

echo "‚úÖ Docker Compose nakonfigurovan√Ω"
EOF

    success "Docker Compose nakonfigurovan√Ω"
}

# Build a spustenie slu≈æieb
build_and_start_services() {
    step "Buildujem a sp√∫≈°≈•am slu≈æby..."

    ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" << EOF
set -e

cd "$REMOTE_DIR"

echo "üê≥ Buildujem Docker images..."
docker-compose build --no-cache voice-chat-backend

echo "üöÄ Sp√∫≈°≈•am slu≈æby..."
docker-compose up -d voice-chat-backend redis

# ƒåakanie na spustenie slu≈æieb
echo "‚è≥ ƒåak√°m na spustenie slu≈æieb..."
sleep 30

# In≈°tal√°cia Piper TTS do kontajnera
echo "üîä In≈°talujem Piper TTS do kontajnera..."
docker exec -u root oracle-voice-chat-backend sh -c '
    apk add --no-cache gcompat wget &&
    cd /tmp &&
    wget -q https://github.com/rhasspy/piper/releases/download/v1.2.0/piper_amd64.tar.gz &&
    tar -xzf piper_amd64.tar.gz &&
    cp piper/piper /usr/bin/ &&
    cp piper/lib*.so* /usr/lib/ &&
    chmod +x /usr/bin/piper &&
    mkdir -p /usr/share/espeak-ng-data &&
    cp -r piper/espeak-ng-data/* /usr/share/espeak-ng-data/ &&
    rm -rf piper piper_amd64.tar.gz
'

# Aktualiz√°cia PIPER_PATH v kontajneri
docker exec oracle-voice-chat-backend sh -c 'export PIPER_PATH=/usr/bin/piper'

echo "‚úÖ Slu≈æby spusten√©"
EOF

    success "Slu≈æby spusten√©"
}

# Testovanie deployment
test_deployment() {
    step "Testujem deployment..."

    ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" << EOF
set -e

cd "$REMOTE_DIR"

echo "üß™ Testujem slu≈æby..."

# Kontrola stavu kontajnerov
echo "üìä Stav kontajnerov:"
docker-compose ps

# Test health check
echo "üè• Testovanie health check..."
sleep 10

if curl -f http://localhost:3000/health; then
    echo "‚úÖ Health check √∫spe≈°n√Ω"
else
    echo "‚ùå Health check zlyhal"
    exit 1
fi

# Test Deepgram API
echo "üé§ Testovanie Deepgram API..."
if curl -f http://localhost:3000/api/deepgram/status; then
    echo "‚úÖ Deepgram API dostupn√©"
else
    echo "‚ùå Deepgram API nedostupn√©"
fi

# Test OpenAI API
echo "ü§ñ Testovanie OpenAI API..."
if curl -f http://localhost:3000/api/chat/status; then
    echo "‚úÖ OpenAI API dostupn√©"
else
    echo "‚ùå OpenAI API nedostupn√©"
fi

# Test Piper TTS v kontajneri
echo "üîä Testovanie Piper TTS..."
if docker exec oracle-voice-chat-backend sh -c 'echo "Test slovensk√©ho hlasu" | /usr/bin/piper --model /app/voices/$TTS_VOICE.onnx --output_file /tmp/test.wav && ls -la /tmp/test.wav'; then
    echo "‚úÖ Piper TTS test √∫spe≈°n√Ω"
else
    echo "‚ùå Piper TTS test zlyhal"
fi

echo "‚úÖ V≈°etky testy √∫spe≈°n√©"
EOF

    success "Deployment otestovan√Ω"
}

# Zobrazenie v√Ωsledkov
show_results() {
    echo ""
    echo -e "${GREEN}üéâ DEPLOYMENT √öSPE≈†NE DOKONƒåEN√ù!${NC}"
    echo "=============================================="
    echo ""
    echo -e "${CYAN}üåê Server je dostupn√Ω na:${NC}"
    echo "   HTTP:      http://$SERVER_IP:3000"
    echo "   HTTPS:     https://$SERVER_IP"
    echo "   WebSocket: wss://$SERVER_IP/ws"
    echo "   Test Page: https://$SERVER_IP/websocket-test.html"
    echo ""
    echo -e "${CYAN}üîß Spr√°va slu≈æieb:${NC}"
    echo "   docker-compose ps              # Stav kontajnerov"
    echo "   docker-compose logs -f         # Logy"
    echo "   docker-compose restart         # Restart"
    echo "   docker-compose down            # Stop"
    echo ""
    echo -e "${CYAN}üß™ Testovanie:${NC}"
    echo "   curl http://$SERVER_IP:3000/health"
    echo "   curl http://$SERVER_IP:3000/api/deepgram/status"
    echo "   curl http://$SERVER_IP:3000/api/chat/status"
    echo ""
    echo -e "${YELLOW}üìã ƒéal≈°ie kroky:${NC}"
    echo "   1. Otestuj voice chat funkcionalitu"
    echo "   2. Skontroluj logy: ssh -i $SSH_KEY $SSH_USER@$SERVER_IP 'cd $REMOTE_DIR && docker-compose logs -f'"
    echo "   3. Nastav Oracle Cloud Security List (porty 80, 443, 3000)"
    echo "   4. Nakonfiguruj SSL certifik√°ty pre produkciu"
    echo ""
}

# Cleanup funkcia
cleanup() {
    log "ƒåist√≠m doƒçasn√© s√∫bory..."
    rm -f /tmp/backend-deploy.tar.gz
}

# ============================================================================
# HLAVN√Å FUNKCIA
# ============================================================================

main() {
    # Trap pre cleanup
    trap cleanup EXIT

    # Zobrazenie konfigur√°cie
    show_config

    # Potvrdenie deployment
    confirm_deployment

    # Kontrola prerekviz√≠t
    check_prerequisites

    log "üöÄ Sp√∫≈°≈•am deployment..."
    echo ""

    # Deployment kroky
    prepare_local_code
    deploy_code
    install_system_dependencies
    setup_piper_tts
    configure_environment
    configure_docker_compose
    build_and_start_services
    test_deployment

    # Zobrazenie v√Ωsledkov
    show_results

    success "üéâ Universal Oracle Voice Chat Backend deployment dokonƒçen√Ω!"
}

# ============================================================================
# POMOCN√â FUNKCIE PRE R√îZNE SCEN√ÅRE
# ============================================================================

# Funkcia pre quick deployment (bez potvrdenia)
quick_deploy() {
    export SKIP_CONFIRMATION=true
    main
}

# Funkcia pre deployment len k√≥du (bez syst√©mov√Ωch z√°vislost√≠)
code_only_deploy() {
    show_config
    confirm_deployment
    check_prerequisites
    prepare_local_code
    deploy_code

    ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" << EOF
cd "$REMOTE_DIR"
docker-compose restart voice-chat-backend
EOF

    success "K√≥d aktualizovan√Ω a slu≈æby re≈°tartovan√©"
}

# Funkcia pre rollback na predch√°dzaj√∫cu verziu
rollback() {
    warning "Sp√∫≈°≈•am rollback na predch√°dzaj√∫cu verziu..."

    ssh -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" << EOF
set -e

# N√°jdenie posledn√©ho backup adres√°ra
BACKUP_DIR=\$(ls -td ${REMOTE_DIR}-backup-* 2>/dev/null | head -1)

if [[ -z "\$BACKUP_DIR" ]]; then
    echo "‚ùå ≈Ωiadny backup nen√°jden√Ω"
    exit 1
fi

echo "üîÑ Rollback na: \$BACKUP_DIR"

# Zastavenie aktu√°lnych slu≈æieb
cd "$REMOTE_DIR"
docker-compose down || true

# Rollback
cd /home/ubuntu
mv "$REMOTE_DIR" "${REMOTE_DIR}-failed-\$(date +%Y%m%d_%H%M%S)"
mv "\$BACKUP_DIR" "$REMOTE_DIR"

# Spustenie slu≈æieb
cd "$REMOTE_DIR"
docker-compose up -d

echo "‚úÖ Rollback dokonƒçen√Ω"
EOF

    success "Rollback dokonƒçen√Ω"
}

# ============================================================================
# SPUSTENIE SCRIPTU
# ============================================================================

# Kontrola argumentov
case "${1:-}" in
    "quick")
        quick_deploy
        ;;
    "code-only")
        code_only_deploy
        ;;
    "rollback")
        rollback
        ;;
    "help"|"-h"|"--help")
        echo "Universal Oracle Voice Chat Backend Deployment Script"
        echo ""
        echo "Pou≈æitie:"
        echo "  $0                 # ≈†tandardn√Ω deployment s potvrden√≠m"
        echo "  $0 quick           # R√Ωchly deployment bez potvrdenia"
        echo "  $0 code-only       # Deployment len k√≥du (bez syst√©mov√Ωch z√°vislost√≠)"
        echo "  $0 rollback        # Rollback na predch√°dzaj√∫cu verziu"
        echo "  $0 help            # Zobrazenie tejto n√°povedy"
        echo ""
        echo "Environment variables:"
        echo "  SERVER_IP          # IP adresa servera (default: 129.159.9.170)"
        echo "  SSH_KEY            # Cesta k SSH kƒæ√∫ƒçu"
        echo "  SSH_USER           # SSH pou≈æ√≠vateƒæ (default: ubuntu)"
        echo "  DEEPGRAM_API_KEY   # Deepgram API kƒæ√∫ƒç"
        echo "  OPENAI_API_KEY     # OpenAI API kƒæ√∫ƒç"
        echo "  TTS_VOICE          # TTS voice model (default: sk_SK-lili-medium)"
        echo ""
        ;;
    *)
        main
        ;;
esac
