#!/bin/bash

# Start Local Development with Piper TTS Server
# Spustenie lok√°lneho v√Ωvoja s Piper TTS serverom

set -euo pipefail

# Farby
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${GREEN}üöÄ Oracle Voice Chat Backend - Local Development with Piper TTS${NC}"
echo "================================================================"

# Kontrola prerekviz√≠t
check_prerequisites() {
    echo -e "${BLUE}üîç Kontrolujem prerekvizity...${NC}"
    
    # Kontrola Node.js
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js nie je nain≈°talovan√Ω${NC}"
        exit 1
    fi
    
    # Kontrola npm
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}‚ùå npm nie je nain≈°talovan√Ω${NC}"
        exit 1
    fi
    
    # Kontrola Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker nie je nain≈°talovan√Ω${NC}"
        exit 1
    fi
    
    # Kontrola package.json
    if [[ ! -f "package.json" ]]; then
        echo -e "${RED}‚ùå package.json nen√°jden√Ω${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Prerekvizity v poriadku${NC}"
}

# In≈°tal√°cia z√°vislost√≠
install_dependencies() {
    echo -e "${BLUE}üì¶ In≈°talujem z√°vislosti...${NC}"
    
    if [[ ! -d "node_modules" ]] || [[ "package.json" -nt "node_modules" ]]; then
        npm install
        echo -e "${GREEN}‚úÖ Z√°vislosti nain≈°talovan√©${NC}"
    else
        echo -e "${CYAN}‚ÑπÔ∏è  Z√°vislosti u≈æ s√∫ nain≈°talovan√©${NC}"
    fi
}

# Nastavenie Piper TTS servera
setup_piper_tts() {
    echo -e "${BLUE}üîä Nastavujem Piper TTS server...${NC}"
    
    if [[ -f "./setup-piper-tts-web.sh" ]]; then
        ./setup-piper-tts-web.sh
        echo -e "${GREEN}‚úÖ Piper TTS server nastaven√Ω${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  setup-piper-tts-web.sh nen√°jden√Ω${NC}"
        echo -e "${CYAN}‚ÑπÔ∏è  Vytv√°ram z√°kladn√© nastavenie...${NC}"
        
        # Z√°kladn√© nastavenie bez skriptu
        if ! docker ps | grep -q "piper-tts-server"; then
            echo -e "${BLUE}üê≥ Sp√∫≈°≈•am Piper TTS server...${NC}"
            
            # Vytvorenie adres√°ra pre hlasy
            mkdir -p piper-data
            
            # Stiahnutie slovensk√©ho hlasu ak neexistuje
            if [[ ! -f "piper-data/sk_SK-lili-medium.onnx" ]]; then
                echo -e "${BLUE}üì• S≈•ahujem slovensk√Ω hlas...${NC}"
                curl -L -o piper-data/sk_SK-lili-medium.onnx \
                    "https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/sk/sk_SK/lili/medium/sk_SK-lili-medium.onnx"
                curl -L -o piper-data/sk_SK-lili-medium.onnx.json \
                    "https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/sk/sk_SK/lili/medium/sk_SK-lili-medium.onnx.json"
            fi
            
            # Spustenie Piper TTS servera
            docker run -d \
                --name piper-tts-server \
                -p 5000:5000 \
                -v "$(pwd)/piper-data:/data" \
                rhasspy/wyoming-piper:latest \
                --voice sk_SK-lili-medium \
                --http-port 5000
            
            echo -e "${GREEN}‚úÖ Piper TTS server spusten√Ω${NC}"
        else
            echo -e "${CYAN}‚ÑπÔ∏è  Piper TTS server u≈æ be≈æ√≠${NC}"
        fi
    fi
}

# Aktualiz√°cia .env s√∫boru pre lok√°lny v√Ωvoj
setup_local_env() {
    echo -e "${BLUE}‚öôÔ∏è  Nastavujem lok√°lne environment...${NC}"
    
    # Z√°loha existuj√∫ceho .env
    if [[ -f ".env" ]]; then
        cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
        echo -e "${CYAN}‚ÑπÔ∏è  Vytvoren√° z√°loha .env s√∫boru${NC}"
    fi
    
    # Vytvorenie/aktualiz√°cia .env pre lok√°lny v√Ωvoj
    cat > .env << 'EOF'
# Oracle Voice Chat Backend - Local Development
NODE_ENV=development
PORT=3000
HOST=0.0.0.0
TZ=Europe/Bratislava

# API Keys (nastav svoje kƒæ√∫ƒçe)
DEEPGRAM_API_KEY=your-deepgram-key-here
OPENAI_API_KEY=your-openai-key-here

# OpenAI Configuration
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=500
OPENAI_TEMPERATURE=0.7
OPENAI_SYSTEM_PROMPT=Si u≈æitoƒçn√Ω AI asistent. Odpovedaj v slovenƒçine, buƒè struƒçn√Ω a priateƒæsk√Ω. Ak dostane≈° ot√°zku v inom jazyku, odpovedaj v tom istom jazyku.

# Redis Configuration (disabled for local dev)
USE_REDIS=false

# CORS Configuration (permissive for local dev)
ALLOWED_ORIGINS=*

# TTS Configuration - Remote Piper TTS Server
PIPER_TTS_URL=http://localhost:5000
TTS_VOICE=sk_SK-lili-medium
TTS_CACHE_ENABLED=true

# Rate Limiting (relaxed for local dev)
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=1000

# Monitoring
ENABLE_METRICS=true
LOG_LEVEL=debug

# Session Configuration
SESSION_SECRET=local-development-secret
SESSION_MAX_AGE=86400000

# Development flags
MOCK_SERVICES=false
DEBUG=voice-chat:*
EOF
    
    echo -e "${GREEN}‚úÖ Lok√°lne environment nastaven√©${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Nezabudni nastavi≈• svoje API kƒæ√∫ƒçe v .env s√∫bore!${NC}"
}

# Test Piper TTS servera
test_piper_tts() {
    echo -e "${BLUE}üß™ Testujem Piper TTS server...${NC}"
    
    # ƒåakanie na spustenie
    sleep 5
    
    # Test HTTP API
    if curl -s -f "http://localhost:5000" > /dev/null; then
        echo -e "${GREEN}‚úÖ Piper TTS server je dostupn√Ω${NC}"
        
        # Test generovania reƒçi
        if curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"text":"Test lok√°lneho Piper TTS servera", "voice":"sk_SK-lili-medium"}' \
            "http://localhost:5000/api/tts" \
            --output /tmp/test-local.wav && [[ -f "/tmp/test-local.wav" ]]; then
            
            echo -e "${GREEN}‚úÖ Generovanie reƒçi funguje${NC}"
            rm -f /tmp/test-local.wav
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Generovanie reƒçi nefunguje spr√°vne${NC}"
        fi
    else
        echo -e "${RED}‚ùå Piper TTS server nie je dostupn√Ω${NC}"
        echo -e "${CYAN}‚ÑπÔ∏è  Skontroluj logy: docker logs piper-tts-server${NC}"
    fi
}

# Spustenie aplik√°cie
start_application() {
    echo -e "${BLUE}üöÄ Sp√∫≈°≈•am aplik√°ciu...${NC}"
    
    # Kontrola ƒçi u≈æ be≈æ√≠
    if lsof -i :3000 > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Port 3000 je u≈æ obsaden√Ω${NC}"
        echo -e "${CYAN}‚ÑπÔ∏è  Zastavujem existuj√∫ci proces...${NC}"
        pkill -f "node.*server.js" || true
        sleep 2
    fi
    
    echo -e "${GREEN}üéâ Aplik√°cia sa sp√∫≈°≈•a...${NC}"
    echo -e "${CYAN}‚ÑπÔ∏è  Dostupn√° na: http://localhost:3000${NC}"
    echo -e "${CYAN}‚ÑπÔ∏è  Pre zastavenie stlaƒç Ctrl+C${NC}"
    echo ""
    
    # Spustenie v development m√≥de
    npm run dev
}

# Zobrazenie in≈°trukci√≠
show_instructions() {
    echo ""
    echo -e "${GREEN}üéâ LOK√ÅLNY V√ùVOJ S PIPER TTS NASTAVEN√ù!${NC}"
    echo "======================================="
    echo ""
    echo -e "${CYAN}üåê Slu≈æby s√∫ dostupn√© na:${NC}"
    echo "   Aplik√°cia:     http://localhost:3000"
    echo "   Piper TTS:     http://localhost:5000"
    echo "   Health check:  http://localhost:3000/health"
    echo "   TTS status:    http://localhost:3000/api/tts/status"
    echo ""
    echo -e "${CYAN}üß™ Testovanie TTS:${NC}"
    echo "   curl -X POST -H 'Content-Type: application/json' \\"
    echo "        -d '{\"text\":\"Test TTS\"}' \\"
    echo "        http://localhost:3000/api/tts/synthesize --output test.wav"
    echo ""
    echo -e "${CYAN}üîß Spr√°va Piper TTS servera:${NC}"
    echo "   docker ps | grep piper-tts-server"
    echo "   docker logs piper-tts-server"
    echo "   docker restart piper-tts-server"
    echo "   docker stop piper-tts-server"
    echo ""
    echo -e "${YELLOW}üìã ƒéal≈°ie kroky:${NC}"
    echo "   1. Nastav API kƒæ√∫ƒçe v .env s√∫bore"
    echo "   2. Re≈°tartuj aplik√°ciu: npm run dev"
    echo "   3. Otestuj voice chat funkcionalitu"
    echo ""
}

# Cleanup funkcia
cleanup() {
    echo -e "${BLUE}üßπ ƒåist√≠m...${NC}"
    # Cleanup sa vykon√° automaticky pri ukonƒçen√≠
}

# Hlavn√° funkcia
main() {
    # Trap pre cleanup
    trap cleanup EXIT
    
    check_prerequisites
    install_dependencies
    setup_piper_tts
    setup_local_env
    test_piper_tts
    show_instructions
    
    # Sp√Ωtaj sa ƒçi spusti≈• aplik√°ciu
    echo -e "${YELLOW}Chce≈° spusti≈• aplik√°ciu teraz? (y/N):${NC} "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        start_application
    else
        echo -e "${CYAN}‚ÑπÔ∏è  Pre spustenie aplik√°cie pou≈æij: npm run dev${NC}"
    fi
}

# Kontrola argumentov
case "${1:-}" in
    "start")
        main
        ;;
    "setup-only")
        check_prerequisites
        install_dependencies
        setup_piper_tts
        setup_local_env
        test_piper_tts
        show_instructions
        ;;
    "help"|"-h"|"--help")
        echo "Local Development with Piper TTS Server"
        echo ""
        echo "Pou≈æitie:"
        echo "  $0                 # Kompletn√© nastavenie a spustenie"
        echo "  $0 start           # Kompletn√© nastavenie a spustenie"
        echo "  $0 setup-only      # Len nastavenie bez spustenia aplik√°cie"
        echo "  $0 help            # Zobrazenie tejto n√°povedy"
        echo ""
        ;;
    *)
        main
        ;;
esac
